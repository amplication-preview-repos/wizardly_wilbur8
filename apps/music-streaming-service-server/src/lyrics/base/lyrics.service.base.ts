/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Lyrics as PrismaLyrics,
  Song as PrismaSong,
} from "@prisma/client";

export class LyricsServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.LyricsCountArgs, "select">): Promise<number> {
    return this.prisma.lyrics.count(args);
  }

  async lyricsItems<T extends Prisma.LyricsFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.LyricsFindManyArgs>
  ): Promise<PrismaLyrics[]> {
    return this.prisma.lyrics.findMany<Prisma.LyricsFindManyArgs>(args);
  }
  async lyrics<T extends Prisma.LyricsFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.LyricsFindUniqueArgs>
  ): Promise<PrismaLyrics | null> {
    return this.prisma.lyrics.findUnique(args);
  }
  async createLyrics<T extends Prisma.LyricsCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.LyricsCreateArgs>
  ): Promise<PrismaLyrics> {
    return this.prisma.lyrics.create<T>(args);
  }
  async updateLyrics<T extends Prisma.LyricsUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.LyricsUpdateArgs>
  ): Promise<PrismaLyrics> {
    return this.prisma.lyrics.update<T>(args);
  }
  async deleteLyrics<T extends Prisma.LyricsDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.LyricsDeleteArgs>
  ): Promise<PrismaLyrics> {
    return this.prisma.lyrics.delete(args);
  }

  async getSong(parentId: string): Promise<PrismaSong | null> {
    return this.prisma.lyrics
      .findUnique({
        where: { id: parentId },
      })
      .song();
  }
}
