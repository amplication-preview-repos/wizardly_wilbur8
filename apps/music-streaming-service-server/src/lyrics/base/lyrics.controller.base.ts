/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { LyricsService } from "../lyrics.service";
import { LyricsCreateInput } from "./LyricsCreateInput";
import { Lyrics } from "./Lyrics";
import { LyricsFindManyArgs } from "./LyricsFindManyArgs";
import { LyricsWhereUniqueInput } from "./LyricsWhereUniqueInput";
import { LyricsUpdateInput } from "./LyricsUpdateInput";

export class LyricsControllerBase {
  constructor(protected readonly service: LyricsService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Lyrics })
  async createLyrics(@common.Body() data: LyricsCreateInput): Promise<Lyrics> {
    return await this.service.createLyrics({
      data: {
        ...data,

        song: data.song
          ? {
              connect: data.song,
            }
          : undefined,
      },
      select: {
        content: true,
        createdAt: true,
        id: true,

        song: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Lyrics] })
  @ApiNestedQuery(LyricsFindManyArgs)
  async lyricsItems(@common.Req() request: Request): Promise<Lyrics[]> {
    const args = plainToClass(LyricsFindManyArgs, request.query);
    return this.service.lyricsItems({
      ...args,
      select: {
        content: true,
        createdAt: true,
        id: true,

        song: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Lyrics })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async lyrics(
    @common.Param() params: LyricsWhereUniqueInput
  ): Promise<Lyrics | null> {
    const result = await this.service.lyrics({
      where: params,
      select: {
        content: true,
        createdAt: true,
        id: true,

        song: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Lyrics })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateLyrics(
    @common.Param() params: LyricsWhereUniqueInput,
    @common.Body() data: LyricsUpdateInput
  ): Promise<Lyrics | null> {
    try {
      return await this.service.updateLyrics({
        where: params,
        data: {
          ...data,

          song: data.song
            ? {
                connect: data.song,
              }
            : undefined,
        },
        select: {
          content: true,
          createdAt: true,
          id: true,

          song: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Lyrics })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteLyrics(
    @common.Param() params: LyricsWhereUniqueInput
  ): Promise<Lyrics | null> {
    try {
      return await this.service.deleteLyrics({
        where: params,
        select: {
          content: true,
          createdAt: true,
          id: true,

          song: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
