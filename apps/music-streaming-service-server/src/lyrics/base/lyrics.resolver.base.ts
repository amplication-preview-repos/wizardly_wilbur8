/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Lyrics } from "./Lyrics";
import { LyricsCountArgs } from "./LyricsCountArgs";
import { LyricsFindManyArgs } from "./LyricsFindManyArgs";
import { LyricsFindUniqueArgs } from "./LyricsFindUniqueArgs";
import { CreateLyricsArgs } from "./CreateLyricsArgs";
import { UpdateLyricsArgs } from "./UpdateLyricsArgs";
import { DeleteLyricsArgs } from "./DeleteLyricsArgs";
import { Song } from "../../song/base/Song";
import { LyricsService } from "../lyrics.service";
@graphql.Resolver(() => Lyrics)
export class LyricsResolverBase {
  constructor(protected readonly service: LyricsService) {}

  async _lyricsItemsMeta(
    @graphql.Args() args: LyricsCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Lyrics])
  async lyricsItems(
    @graphql.Args() args: LyricsFindManyArgs
  ): Promise<Lyrics[]> {
    return this.service.lyricsItems(args);
  }

  @graphql.Query(() => Lyrics, { nullable: true })
  async lyrics(
    @graphql.Args() args: LyricsFindUniqueArgs
  ): Promise<Lyrics | null> {
    const result = await this.service.lyrics(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Lyrics)
  async createLyrics(@graphql.Args() args: CreateLyricsArgs): Promise<Lyrics> {
    return await this.service.createLyrics({
      ...args,
      data: {
        ...args.data,

        song: args.data.song
          ? {
              connect: args.data.song,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => Lyrics)
  async updateLyrics(
    @graphql.Args() args: UpdateLyricsArgs
  ): Promise<Lyrics | null> {
    try {
      return await this.service.updateLyrics({
        ...args,
        data: {
          ...args.data,

          song: args.data.song
            ? {
                connect: args.data.song,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Lyrics)
  async deleteLyrics(
    @graphql.Args() args: DeleteLyricsArgs
  ): Promise<Lyrics | null> {
    try {
      return await this.service.deleteLyrics(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Song, {
    nullable: true,
    name: "song",
  })
  async getSong(@graphql.Parent() parent: Lyrics): Promise<Song | null> {
    const result = await this.service.getSong(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
