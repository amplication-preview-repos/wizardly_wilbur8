/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Stream } from "./Stream";
import { StreamCountArgs } from "./StreamCountArgs";
import { StreamFindManyArgs } from "./StreamFindManyArgs";
import { StreamFindUniqueArgs } from "./StreamFindUniqueArgs";
import { CreateStreamArgs } from "./CreateStreamArgs";
import { UpdateStreamArgs } from "./UpdateStreamArgs";
import { DeleteStreamArgs } from "./DeleteStreamArgs";
import { Song } from "../../song/base/Song";
import { User } from "../../user/base/User";
import { StreamService } from "../stream.service";
@graphql.Resolver(() => Stream)
export class StreamResolverBase {
  constructor(protected readonly service: StreamService) {}

  async _streamsMeta(
    @graphql.Args() args: StreamCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Stream])
  async streams(@graphql.Args() args: StreamFindManyArgs): Promise<Stream[]> {
    return this.service.streams(args);
  }

  @graphql.Query(() => Stream, { nullable: true })
  async stream(
    @graphql.Args() args: StreamFindUniqueArgs
  ): Promise<Stream | null> {
    const result = await this.service.stream(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Stream)
  async createStream(@graphql.Args() args: CreateStreamArgs): Promise<Stream> {
    return await this.service.createStream({
      ...args,
      data: {
        ...args.data,

        song: args.data.song
          ? {
              connect: args.data.song,
            }
          : undefined,

        user: args.data.user
          ? {
              connect: args.data.user,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => Stream)
  async updateStream(
    @graphql.Args() args: UpdateStreamArgs
  ): Promise<Stream | null> {
    try {
      return await this.service.updateStream({
        ...args,
        data: {
          ...args.data,

          song: args.data.song
            ? {
                connect: args.data.song,
              }
            : undefined,

          user: args.data.user
            ? {
                connect: args.data.user,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Stream)
  async deleteStream(
    @graphql.Args() args: DeleteStreamArgs
  ): Promise<Stream | null> {
    try {
      return await this.service.deleteStream(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Song, {
    nullable: true,
    name: "song",
  })
  async getSong(@graphql.Parent() parent: Stream): Promise<Song | null> {
    const result = await this.service.getSong(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => User, {
    nullable: true,
    name: "user",
  })
  async getUser(@graphql.Parent() parent: Stream): Promise<User | null> {
    const result = await this.service.getUser(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
