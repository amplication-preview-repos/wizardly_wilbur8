/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { StreamService } from "../stream.service";
import { StreamCreateInput } from "./StreamCreateInput";
import { Stream } from "./Stream";
import { StreamFindManyArgs } from "./StreamFindManyArgs";
import { StreamWhereUniqueInput } from "./StreamWhereUniqueInput";
import { StreamUpdateInput } from "./StreamUpdateInput";

export class StreamControllerBase {
  constructor(protected readonly service: StreamService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Stream })
  async createStream(@common.Body() data: StreamCreateInput): Promise<Stream> {
    return await this.service.createStream({
      data: {
        ...data,

        song: data.song
          ? {
              connect: data.song,
            }
          : undefined,

        user: data.user
          ? {
              connect: data.user,
            }
          : undefined,
      },
      select: {
        createdAt: true,
        id: true,

        song: {
          select: {
            id: true,
          },
        },

        timestamp: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Stream] })
  @ApiNestedQuery(StreamFindManyArgs)
  async streams(@common.Req() request: Request): Promise<Stream[]> {
    const args = plainToClass(StreamFindManyArgs, request.query);
    return this.service.streams({
      ...args,
      select: {
        createdAt: true,
        id: true,

        song: {
          select: {
            id: true,
          },
        },

        timestamp: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Stream })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async stream(
    @common.Param() params: StreamWhereUniqueInput
  ): Promise<Stream | null> {
    const result = await this.service.stream({
      where: params,
      select: {
        createdAt: true,
        id: true,

        song: {
          select: {
            id: true,
          },
        },

        timestamp: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Stream })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateStream(
    @common.Param() params: StreamWhereUniqueInput,
    @common.Body() data: StreamUpdateInput
  ): Promise<Stream | null> {
    try {
      return await this.service.updateStream({
        where: params,
        data: {
          ...data,

          song: data.song
            ? {
                connect: data.song,
              }
            : undefined,

          user: data.user
            ? {
                connect: data.user,
              }
            : undefined,
        },
        select: {
          createdAt: true,
          id: true,

          song: {
            select: {
              id: true,
            },
          },

          timestamp: true,
          updatedAt: true,

          user: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Stream })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteStream(
    @common.Param() params: StreamWhereUniqueInput
  ): Promise<Stream | null> {
    try {
      return await this.service.deleteStream({
        where: params,
        select: {
          createdAt: true,
          id: true,

          song: {
            select: {
              id: true,
            },
          },

          timestamp: true,
          updatedAt: true,

          user: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
