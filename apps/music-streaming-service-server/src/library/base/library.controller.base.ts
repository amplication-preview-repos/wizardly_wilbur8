/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { LibraryService } from "../library.service";
import { LibraryCreateInput } from "./LibraryCreateInput";
import { Library } from "./Library";
import { LibraryFindManyArgs } from "./LibraryFindManyArgs";
import { LibraryWhereUniqueInput } from "./LibraryWhereUniqueInput";
import { LibraryUpdateInput } from "./LibraryUpdateInput";

export class LibraryControllerBase {
  constructor(protected readonly service: LibraryService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Library })
  async createLibrary(
    @common.Body() data: LibraryCreateInput
  ): Promise<Library> {
    return await this.service.createLibrary({
      data: {
        ...data,

        user: data.user
          ? {
              connect: data.user,
            }
          : undefined,
      },
      select: {
        createdAt: true,
        downloadedSongs: true,
        id: true,
        likedSongs: true,
        songs: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Library] })
  @ApiNestedQuery(LibraryFindManyArgs)
  async libraries(@common.Req() request: Request): Promise<Library[]> {
    const args = plainToClass(LibraryFindManyArgs, request.query);
    return this.service.libraries({
      ...args,
      select: {
        createdAt: true,
        downloadedSongs: true,
        id: true,
        likedSongs: true,
        songs: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Library })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async library(
    @common.Param() params: LibraryWhereUniqueInput
  ): Promise<Library | null> {
    const result = await this.service.library({
      where: params,
      select: {
        createdAt: true,
        downloadedSongs: true,
        id: true,
        likedSongs: true,
        songs: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Library })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateLibrary(
    @common.Param() params: LibraryWhereUniqueInput,
    @common.Body() data: LibraryUpdateInput
  ): Promise<Library | null> {
    try {
      return await this.service.updateLibrary({
        where: params,
        data: {
          ...data,

          user: data.user
            ? {
                connect: data.user,
              }
            : undefined,
        },
        select: {
          createdAt: true,
          downloadedSongs: true,
          id: true,
          likedSongs: true,
          songs: true,
          updatedAt: true,

          user: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Library })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteLibrary(
    @common.Param() params: LibraryWhereUniqueInput
  ): Promise<Library | null> {
    try {
      return await this.service.deleteLibrary({
        where: params,
        select: {
          createdAt: true,
          downloadedSongs: true,
          id: true,
          likedSongs: true,
          songs: true,
          updatedAt: true,

          user: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
