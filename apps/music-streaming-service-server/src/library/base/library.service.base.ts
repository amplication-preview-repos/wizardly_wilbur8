/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Library as PrismaLibrary,
  User as PrismaUser,
} from "@prisma/client";

export class LibraryServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.LibraryCountArgs, "select">): Promise<number> {
    return this.prisma.library.count(args);
  }

  async libraries<T extends Prisma.LibraryFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.LibraryFindManyArgs>
  ): Promise<PrismaLibrary[]> {
    return this.prisma.library.findMany<Prisma.LibraryFindManyArgs>(args);
  }
  async library<T extends Prisma.LibraryFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.LibraryFindUniqueArgs>
  ): Promise<PrismaLibrary | null> {
    return this.prisma.library.findUnique(args);
  }
  async createLibrary<T extends Prisma.LibraryCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.LibraryCreateArgs>
  ): Promise<PrismaLibrary> {
    return this.prisma.library.create<T>(args);
  }
  async updateLibrary<T extends Prisma.LibraryUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.LibraryUpdateArgs>
  ): Promise<PrismaLibrary> {
    return this.prisma.library.update<T>(args);
  }
  async deleteLibrary<T extends Prisma.LibraryDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.LibraryDeleteArgs>
  ): Promise<PrismaLibrary> {
    return this.prisma.library.delete(args);
  }

  async getUser(parentId: string): Promise<PrismaUser | null> {
    return this.prisma.library
      .findUnique({
        where: { id: parentId },
      })
      .user();
  }
}
