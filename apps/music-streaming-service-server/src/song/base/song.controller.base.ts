/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { SongService } from "../song.service";
import { SongCreateInput } from "./SongCreateInput";
import { Song } from "./Song";
import { SongFindManyArgs } from "./SongFindManyArgs";
import { SongWhereUniqueInput } from "./SongWhereUniqueInput";
import { SongUpdateInput } from "./SongUpdateInput";
import { LyricsFindManyArgs } from "../../lyrics/base/LyricsFindManyArgs";
import { Lyrics } from "../../lyrics/base/Lyrics";
import { LyricsWhereUniqueInput } from "../../lyrics/base/LyricsWhereUniqueInput";
import { StreamFindManyArgs } from "../../stream/base/StreamFindManyArgs";
import { Stream } from "../../stream/base/Stream";
import { StreamWhereUniqueInput } from "../../stream/base/StreamWhereUniqueInput";

export class SongControllerBase {
  constructor(protected readonly service: SongService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Song })
  async createSong(@common.Body() data: SongCreateInput): Promise<Song> {
    return await this.service.createSong({
      data: {
        ...data,

        album: data.album
          ? {
              connect: data.album,
            }
          : undefined,
      },
      select: {
        album: {
          select: {
            id: true,
          },
        },

        artist: true,
        createdAt: true,
        duration: true,
        file: true,
        genre: true,
        id: true,
        title: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Song] })
  @ApiNestedQuery(SongFindManyArgs)
  async songs(@common.Req() request: Request): Promise<Song[]> {
    const args = plainToClass(SongFindManyArgs, request.query);
    return this.service.songs({
      ...args,
      select: {
        album: {
          select: {
            id: true,
          },
        },

        artist: true,
        createdAt: true,
        duration: true,
        file: true,
        genre: true,
        id: true,
        title: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Song })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async song(
    @common.Param() params: SongWhereUniqueInput
  ): Promise<Song | null> {
    const result = await this.service.song({
      where: params,
      select: {
        album: {
          select: {
            id: true,
          },
        },

        artist: true,
        createdAt: true,
        duration: true,
        file: true,
        genre: true,
        id: true,
        title: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Song })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateSong(
    @common.Param() params: SongWhereUniqueInput,
    @common.Body() data: SongUpdateInput
  ): Promise<Song | null> {
    try {
      return await this.service.updateSong({
        where: params,
        data: {
          ...data,

          album: data.album
            ? {
                connect: data.album,
              }
            : undefined,
        },
        select: {
          album: {
            select: {
              id: true,
            },
          },

          artist: true,
          createdAt: true,
          duration: true,
          file: true,
          genre: true,
          id: true,
          title: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Song })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteSong(
    @common.Param() params: SongWhereUniqueInput
  ): Promise<Song | null> {
    try {
      return await this.service.deleteSong({
        where: params,
        select: {
          album: {
            select: {
              id: true,
            },
          },

          artist: true,
          createdAt: true,
          duration: true,
          file: true,
          genre: true,
          id: true,
          title: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/lyricsItems")
  @ApiNestedQuery(LyricsFindManyArgs)
  async findLyricsItems(
    @common.Req() request: Request,
    @common.Param() params: SongWhereUniqueInput
  ): Promise<Lyrics[]> {
    const query = plainToClass(LyricsFindManyArgs, request.query);
    const results = await this.service.findLyricsItems(params.id, {
      ...query,
      select: {
        content: true,
        createdAt: true,
        id: true,

        song: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/lyricsItems")
  async connectLyricsItems(
    @common.Param() params: SongWhereUniqueInput,
    @common.Body() body: LyricsWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      lyricsItems: {
        connect: body,
      },
    };
    await this.service.updateSong({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/lyricsItems")
  async updateLyricsItems(
    @common.Param() params: SongWhereUniqueInput,
    @common.Body() body: LyricsWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      lyricsItems: {
        set: body,
      },
    };
    await this.service.updateSong({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/lyricsItems")
  async disconnectLyricsItems(
    @common.Param() params: SongWhereUniqueInput,
    @common.Body() body: LyricsWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      lyricsItems: {
        disconnect: body,
      },
    };
    await this.service.updateSong({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/streams")
  @ApiNestedQuery(StreamFindManyArgs)
  async findStreams(
    @common.Req() request: Request,
    @common.Param() params: SongWhereUniqueInput
  ): Promise<Stream[]> {
    const query = plainToClass(StreamFindManyArgs, request.query);
    const results = await this.service.findStreams(params.id, {
      ...query,
      select: {
        createdAt: true,
        id: true,

        song: {
          select: {
            id: true,
          },
        },

        timestamp: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/streams")
  async connectStreams(
    @common.Param() params: SongWhereUniqueInput,
    @common.Body() body: StreamWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      streams: {
        connect: body,
      },
    };
    await this.service.updateSong({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/streams")
  async updateStreams(
    @common.Param() params: SongWhereUniqueInput,
    @common.Body() body: StreamWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      streams: {
        set: body,
      },
    };
    await this.service.updateSong({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/streams")
  async disconnectStreams(
    @common.Param() params: SongWhereUniqueInput,
    @common.Body() body: StreamWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      streams: {
        disconnect: body,
      },
    };
    await this.service.updateSong({
      where: params,
      data,
      select: { id: true },
    });
  }
}
