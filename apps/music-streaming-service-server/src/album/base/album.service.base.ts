/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Album as PrismaAlbum,
  Song as PrismaSong,
} from "@prisma/client";

export class AlbumServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.AlbumCountArgs, "select">): Promise<number> {
    return this.prisma.album.count(args);
  }

  async albums<T extends Prisma.AlbumFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.AlbumFindManyArgs>
  ): Promise<PrismaAlbum[]> {
    return this.prisma.album.findMany<Prisma.AlbumFindManyArgs>(args);
  }
  async album<T extends Prisma.AlbumFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.AlbumFindUniqueArgs>
  ): Promise<PrismaAlbum | null> {
    return this.prisma.album.findUnique(args);
  }
  async createAlbum<T extends Prisma.AlbumCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.AlbumCreateArgs>
  ): Promise<PrismaAlbum> {
    return this.prisma.album.create<T>(args);
  }
  async updateAlbum<T extends Prisma.AlbumUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.AlbumUpdateArgs>
  ): Promise<PrismaAlbum> {
    return this.prisma.album.update<T>(args);
  }
  async deleteAlbum<T extends Prisma.AlbumDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.AlbumDeleteArgs>
  ): Promise<PrismaAlbum> {
    return this.prisma.album.delete(args);
  }

  async findSongs(
    parentId: string,
    args: Prisma.SongFindManyArgs
  ): Promise<PrismaSong[]> {
    return this.prisma.album
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .songs(args);
  }
}
